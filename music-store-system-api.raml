#%RAML 1.0
title: Music Store System API

description: Music Store System API sole purpose is to fetch data from DB and/or store data in DB.
mediaType:
  - application/json
version: v1
protocols:
  - HTTP

types:
  Category:
    description: Product category
    type: !include data-types/category.raml
  Artist:
    description: Product artist
    type: !include data-types/artist.raml
  Product:
    description: Main resource type
    type: !include data-types/product.raml

traits:
  paginated: !include traits/pageable.raml
  sorted: !include traits/sortable.raml

/products:
  get:
    is: [ paginated, sorted ]
    displayName: GET all products
    description: Retrieves all products from database
    responses:
      200:
        body:
          application/json:
            type: Product[]
            examples: !include examples/response-products.raml
  /{id}:
    get:
      displayName: GET a single product
      description: Retrieves a single product from database
      responses:
        200:
          body:
            application/json:
              type: Product
              examples: !include examples/response-product.raml
        404:
          body:
            application/json:
              example:
                message: "Product not found!"
  /category:
    /{id}:
      get:
        is: [ paginated, sorted]
        displayName: GET products by category id
        description: Retrieves all products from a given category
        responses:
          200:
            body:
              application/json:
                type: Product[]
                examples: !include examples/response-products.raml
    /{name}:
      get:
        is: [ paginated, sorted]
        displayName: GET products by category name
        description: Retrieves all products from a given category
        responses:
          200:
            body:
              application/json:
                type: Product[]
                examples: !include examples/response-products.raml
  /artist/{name}:
    get:
      is: [ paginated, sorted ]
      displayName: GET products by artist name
      description: Retrieves all products for a given artist
      responses:
        200:
          body:
            application/json:
              type: Product[]
              examples: !include examples/response-products.raml
  /search/{query}:
    get:
      is: [ paginated, sorted ]
      displayName: GET products by provided query
      description: Retrieves products containing search query in their respective product name field
      responses:
        200:
          body:
            application/json:
              type: Product[]
              examples: !include examples/response-products.raml
  /range:
    get:
      is: [ paginated, sorted ]
      displayName: GET products between given price range
      description: Retrieves products between given price range
      queryParameters:
        start:
          type: str
      responses:
        200:
          body:
            application/json:
              type: Product[]
              examples: !include examples/response-products.raml